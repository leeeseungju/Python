# -*- coding: utf-8 -*-
"""계절성지수산출_이승주.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19yuqad4QK6JBPOmMCy6rruJ20xduXuUl
"""

import pandas as pd

import numpy as np

"""## 1. 데이터 전처리

### 1-1. 타입 통합 & 불량 데이터 처리
"""

# kopo_channel_deasonality_new.csv 파일 불러온 후 selloutData 변수에 담기
kopo_channel_seasonality_new_url = "https://github.com/hyokwan/python-lecture/blob/751eb5720e876c76570c3095daaa7f6fe8bafa0d/dataset/kopo_channel_seasonality_new.csv?raw=true"

selloutData = pd.read_csv(kopo_channel_seasonality_new_url)
selloutData.head()

# selloutData 컬럼 형식 확인
selloutData.dtypes

# selloutData 컬럼명 확인
columnList = list(selloutData.columns)
columnList

"""### 1-2. 데이터 통합

[데이터타입 통합] <br>
kopo_channel_seasonality_new.csv 파일을 불러온 후 selloutData 변수에 담으세요 이후 QTY컬럼→실수(float), 이외컬럼→문자(str)로 변경하세요
"""

# 1번 방식
selloutData["QTY"] = selloutData["QTY"].astype(float)
selloutData["REGIONID"] = selloutData["REGIONID"].astype(str)
selloutData["PRODUCT"] = selloutData["PRODUCT"].astype(str)
selloutData["YEARWEEK"] = selloutData["YEARWEEK"].astype(str)

# selloutData 컬럼 형식 확인
selloutData.dtypes

"""[실습] <br>
selloutData 데이터 프레임에서 모든 컬럼을 문자형으로 바꾸는 함수<br>
파라미터로 컬럼이름을 리스트로 주면 해당건만 float로 <br>
(단, apply 같은 어려운 함수쓰지말고 기본기로)
"""

# 2번 방식
# selloutData 데이터프레임에서 모든 컬럼을 문자형으로 바꾸는 함수
def convert_columns(df, float_columns):
    # 새로운 데이터프레임을 복사 생성
    new_df = df.copy() # 원본 건드리지 않기 위해 복사

    # 전체 컬럼 반복
    for col in new_df.columns: # 데이터프레임의 모든 컬럼을 하나씩 돌면서
        if col in float_columns: # 만약 해당 컬럼이 float_columns 리스트에 있다면
            new_df[col] = new_df[col].astype(float) # float으로 바꾸고
        else:
            new_df[col] = new_df[col].astype(str) # 나머지는 문자열(str)로 바꾸기

    return new_df

# 파라미터로 컬럼 이름을 리스트로 주면 해당 건만 float로 변경하기
# STEP 1. float로 변환할 컬럼 리스트
float_cols = ['QTY']  # 'QTY' 컬럼만 float로 변환하고, 나머지는 문자열(str)

# STEP 2. 함수 실행 (selloutData를 넣고, 'QTY'만 float로 바꾸게 지정)
converted_df = convert_columns(selloutData, float_cols)

# STEP 3. 결과 확인
print(converted_df.dtypes)

"""[불량 데이터 처리]<br>
kopo_channel_seasonality_new.csv 자료를 담은 selloutData 변수에서 QTY컬럼 음수(반품)인 경우 0, 양수인 경우 기존 QTY 값 유지하는 로직을 적용하여 QTY_NEW 컬럼을 추가하세요
"""

selloutData["QTY_NEW"] = np.where(selloutData["QTY"] < 0, 0, selloutData["QTY"])
selloutData

selloutData.QTY.max()
selloutData.QTY.min()
selloutData.QTY.sum()
selloutData.QTY.count()

selloutData[selloutData.QTY < 0]["QTY"].count()

"""[데이터 통합] <br>
selloutData 자료에서 YEAR, WEEK 컬럼을 생성하고 WEEK 컬럼 값이 52 이하인 데이터만 refinedSelloutData 변수에 저장하세요
"""

selloutData["YEAR"] = selloutData["YEARWEEK"].astype(str).str[:4]
selloutData["WEEK"] = selloutData["YEARWEEK"].astype(str).str[4:].astype(int)

refinedSelloutData = selloutData[selloutData["WEEK"] <= 52]
refinedSelloutData

"""## 2. 추세선 도출

[프로젝트 실습] <br> refinedSelloutData 에서 → 지역, 상품, 연주차 컬럼순으로 오름차순 정렬하여 sortedData 변수에 담으세요
"""

sortedData = refinedSelloutData.sort_values(
    by=["REGIONID", "PRODUCT", "YEARWEEK"],
    ascending=[True, True, True]
)
sortedData

"""### 2-1. 대표값 생성

[지역, 상품, 연도 별 집계] <br>
sortedData 에서 지역, 상품, 연도 단위 판매량(QTY_NEW) 의 평균 연산 후 groupData 변수에 담으세요 이후 컬럼명을 QTY_MEAN로 변경하세요
"""

groupData = sortedData.groupby(["REGIONID", "PRODUCT", "YEAR"])["QTY_NEW"].mean().reset_index()

# 컬럼명 변경 QTY_NEW -> QTY_MEAN
groupData.rename(columns={"QTY_NEW": "QTY_MEAN"}, inplace=True)

# 결과 확인
groupData

"""## 3. 계절성 지수 산출

### 3-1. 계절성 지수 계산

[프로젝트 실습]<br>
refinedSelloutData와 groupData를
[REGIONID, PRODUCT, YEAR] 키로 조인하여
mergedData 변수에 아래와 같이 담으세요
"""

refinedSelloutData

groupData

# refinedSelloutData와 groupData를 [REGIONID, PRODUCT, YEAR] 기준으로 inner join
mergedData = pd.merge(
    left=refinedSelloutData,
    right=groupData,
    on=["REGIONID", "PRODUCT", "YEAR"],
    how="inner"
)

# 결과를 REGIONID, PRODUCT, YEARWEEK 기준으로 오름차순 정렬
mergedData = mergedData.sort_values(by=["REGIONID", "PRODUCT", "YEARWEEK"])

mergedData

"""### 3-2. 주차별 효과 계산

[프로젝트 실습]<br>
mergedData를 활용하여
SEASONALITY = QTY_NEW / QTY_MEAN
SEASONALITY 컬럼을 생성한다.
"""

mergedData.loc[:, 'SEASONALITY'] = mergedData['QTY_NEW'] / mergedData['QTY_MEAN']
mergedData

"""[프로젝트 실습]<br>
마지막으로 [지역, 상품, 주차] 별
SEASONALITY 평균 값을
산출하여 finalResult 변수에 담으세요
"""

finalResult = mergedData.groupby(["REGIONID", "PRODUCT", "YEARWEEK"])["SEASONALITY"].mean().reset_index()
finalResult