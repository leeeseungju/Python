# -*- coding: utf-8 -*-
"""ETL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ngLVx7vnJVHk6le1UMdNpV8jl9mm4KzV

# Pandas 라이브러리를 활용한 데이터 수집 및 저장

### 라이브러리 선언하기
"""

# !pip install mysql-connector-python
!pip install pymysql

# Pandas 패키지 불러오기
import pandas as pd
from sqlalchemy import create_engine, inspect

# # 구글드라이브 연동
from google.colab import drive
drive.mount("/content/gdrive")

"""### 1. 파일 데이터 불러오기"""

dataName = "join_financial_data"

# CSV 파일을 읽어 Data Frame 변수에 저장하기
accountDataUrl = f"/content/gdrive/MyDrive/Colab Notebooks/fintech_edu_2025/중간고사/ETL/금융데이터/account_info.csv"
encoding = ["ms949","utf-8"]
for i in range(0, len(encoding)):
    try:
        accountData = pd.read_csv(accountDataUrl, encoding = encoding[i])
    except Exception as e:
        print(e, encoding[i])

accountData.head()

# CSV 파일을 읽어 Data Frame 변수에 저장하기
customerDataUrl = f"/content/gdrive/MyDrive/Colab Notebooks/fintech_edu_2025/중간고사/ETL/금융데이터/customer_info.csv"
encoding = ["ms949","utf-8"]
for i in range(0, len(encoding)):
    try:
        customerData = pd.read_csv(customerDataUrl, encoding = encoding[i])
    except Exception as e:
        print(e, encoding[i])

customerData.head()

"""### 2. MySQL에 데이터프레임 저장"""

# MySQL 데이터베이스 연결 정보 설정
user = 'kopouser'
password = 'kopouser'
host = '0.tcp.jp.ngrok.io'
port = '14028'
database = 'kopodb'

# SQLAlchemy 엔진 생성
# engine = create_engine(f'mysql+mysqlconnector://{user}:{password}@{host}:{port}/{database}')
myngine = create_engine(f'mysql+pymysql://{user}:{password}@{host}:{port}/{database}')

# 데이터프레임을 MySQL 데이터베이스의 테이블에 저장
table_name = "join_accountdata"
try:
    accountData.to_sql(name=table_name, con=myngine, if_exists='replace', index=False)
    print(f"{table_name} DB 입력 성공")
except Exception as e:
    print(e)

# 데이터프레임을 MySQL 데이터베이스의 테이블에 저장
table_name = "join_customerdata"
try:
    customerData.to_sql(name=table_name, con=myngine, if_exists='replace', index=False)
    print(f"{table_name} DB 입력 성공")
except Exception as e:
    print(e)

# inDf = pd.read_sql_query(sql=selectQ, con=myngine)

# 파일 경로
accountDataUrl = "/content/gdrive/MyDrive/Colab Notebooks/fintech_edu_2025/중간고사/ETL/금융데이터/account_info.csv"
customerDataUrl = "/content/gdrive/MyDrive/Colab Notebooks/fintech_edu_2025/중간고사/ETL/금융데이터/customer_info.csv"

# 인코딩 자동 처리
def read_csv_auto_encoding(path):
    for enc in ["ms949", "utf-8"]:
        try:
            return pd.read_csv(path, encoding=enc)
        except:
            continue
    raise ValueError(f"파일을 읽는 데 실패: {path}")

# 데이터 불러오기
account_df = read_csv_auto_encoding(accountDataUrl)
customer_df = read_csv_auto_encoding(customerDataUrl)

# 조인 (customer_id 기준으로 INNER JOIN)
merged_df = pd.merge(account_df, customer_df, on="customer_id", how="inner")
merged_df.to_sql(name='join_financial_data', con=myngine, if_exists='replace', index=False)

# 결과 확인
display(merged_df.head())

table_name = "join_financial_data"

try:
    merged_df.to_sql(name=table_name, con=myngine, if_exists='replace', index=False)
    print(f"테이블 '{table_name}' MySQL에 저장 완료!")
except Exception as e:
    print("저장 중 오류 발생:", e)

"""### 3. MySQL 내 데이터 조회"""

# 테이블 목록 조회
inspector = inspect(myngine)

tables = inspector.get_table_names()
tables

# 타겟 테이블 조회
sqlSelect = """
SELECT *
FROM JOIN_FINANCIAL_DATA"""

Df = pd.read_sql_query(sqlSelect, con=myngine)
Df.head()

"""### [실습] local mysql 데이터를 클라우드 mysql에 저장하세요
customerdata -> customerdata_홍길동

"""

# PANDAS 패키지 불러오기
import pandas as pd
# import pymysql
from sqlalchemy import create_engine


# MySQL 데이터베이스 연결 정보 설정 (클라우드)
user = 'kopouser'
password = 'kopouser'
host = '0.tcp.jp.ngrok.io'
port = '19975'
database = 'kopodb'

# SQLAlchemy 엔진 생성
engine = create_engine(f'mysql+pymysql://{user}:{password}@{host}:{port}/{database}')
# DB 커넥션 열기
# pg_my_engine = create_engine('postgresql://postgres:postgres@127.0.0.1:5432/postgres')
# oracle_com_engine = create_engine('oracle+cx_oracle://kopo:kopo@127.0.0.1:1521/xe')

# DB 테이블을 읽어 Data Frame 변수에 저장하기
inData = pd.read_sql_table('join_financial_data', myngine)
inData.to_csv("join_financial_data.csv", index=False)

inData.to_sql("join_financial_data", con=engine, if_exists="replace", index=False)
print("join_financial_data 복사 완료")